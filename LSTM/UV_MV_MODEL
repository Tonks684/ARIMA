{
 "cells": [
  {
   "attachments": {
    "gsk_logo_final.png": {
     "image/png": "iVBORw0KGgoAAAANSUhEUgAAAKAAAAB4CAMAAAE1eznLAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAE4UExURf/////49v/v6f/23//hxP/Pv/+3g/+1bv6eS/+UBf+NBv+cBf+mBP+uBf+2Fv/KKP+/AP/KQv/aXP/gfP/rrf/sxf/k2v/Cpv+cWv+NTf+HLP+DB/95CP+IBv/gi/+gbf9zCf9rCf9tCP91CP/z7/+2nf+APv9fAP/BrP9XAP9mCf/WyP91P/5oCf+XNv+EXf+0jf/Lsv+LWv+KZv1iCP8/AP+Scv9PAP1dCfqllP+effpeJv9fGv9yM/+mjP+ukv97Sv9tKP3Wzv+SZ/vn6PpYB/9JAP+Xb/h1WPlOBvVDBfvEu/+ehf/Ml/8zAPm0qvI5BfOgof/OdPGHhP+/XO4wBPlkOve+vO50dvfKzOkAAPZ6ZfluSfFQPvra2vNfSe5iXvaLe/8AAOsrH+xNSe5qa+w2LQAAAJoTBOUAAABodFJOU/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AH+z9SwAAAAlwSFlzAAAOwwAADsMBx2+oZAAAC3VJREFUaEPtW21v20YSHpKmHcCO7aQNUBR0T1+Y5RJCAZJagMeAFEhZgKEoPBg5yZWcMMm1/f9/4Z5Zrl78GtvpFb07Pm5KarUaPZzdmdnZWdGfibzX804OjsyrFk0oQuGdHOM2pyBvG2fkk0cnB1TSsGmbiE7JIRI27uwizZpg1ToeDDzc7FBVNeihMZuNJ+aWKnP9r0YYipP9Q/PCYJyKMjrZf0WR7Y+ctG2UoXTQ2L5YYWapzBUnRL5L/chdaWkS9nq4VAV/lhULvJ9Mxu3d/4jmvhmR8Dxv/+Dwxfem4VZIEQI9zz05QV9uMRP0GmZjEqTIKyOP9jHDiVyKyDHa38Js8qaS41Di+wkyTeuQ5qVl4cbaaRuAGWHIBoMerMt7Zdpux+fZbDKZpIOBMA0jGtpvSOIqA9+0Gfw6my3NbYcOjwNMRtvBS/P6DoiwB+fvnezvH3AAuBNsWmxchJ7HHD/YAm7BOGUzFCE6tlaorCxCe0Ru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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![gsk_logo_final.png](attachment:gsk_logo_final.png)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1><center> Project: LSTM Forecasting </center></h1>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Data Analysis "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "## CONTINUOUS AUTOLOADING\n",
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "## IMPORTING LIBRARIES & PACKAGES FROM SOURCE CODE FOLDER \n",
    "%run lib_imports.py\n",
    "#Set seed for reproducibility\n",
    "random.seed  = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1258, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>load</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-07-06</th>\n",
       "      <td>19707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-06</th>\n",
       "      <td>21908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-09-06</th>\n",
       "      <td>22262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-06</th>\n",
       "      <td>23484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-11-06</th>\n",
       "      <td>21509</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             load\n",
       "date             \n",
       "2020-07-06  19707\n",
       "2020-08-06  21908\n",
       "2020-09-06  22262\n",
       "2020-10-06  23484\n",
       "2020-11-06  21509"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## LOADING FILE\n",
    "from loading_series import load_series\n",
    "\n",
    "# Select file and series\n",
    "Filename = 'dummy_dataset.csv'\n",
    "\n",
    "# Subcategory - input single subcategory name for MV and MS. Input : for MP.\n",
    "Subcategory = 'load'\n",
    "\n",
    "#Model Type\n",
    "model_type = 'ms'\n",
    "\n",
    "#Forecst Horizon\n",
    "forecasting_horizon = 12\n",
    "\n",
    "#Model Storage Location\n",
    "model_output_dir = \"/Users/smt29021/OneDrive - GSK/Samuel Tonks/LSTMs/LSTM_MS_MV_MP/\"\n",
    "\n",
    "# load the Series to analyse  \n",
    "OriginalDataSeries,NameofTimeSeriesAnalysed = load_series(Filename, Subcategory,model_type)\n",
    "columns = list(OriginalDataSeries.columns)\n",
    "print(OriginalDataSeries.shape)\n",
    "OriginalDataSeries.tail()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#FinalFilename = Subcategory + \"_LSTM\" + Filename.replace(\".csv\", \"\")\n",
    "# this is the name used for saving the summary of the model\n",
    "#FinalFilenametxt = Subcategory + \"_LSTM\" + Filename.replace(\".csv\", \".txt\") \n",
    "# this is the name used for saving the models specs\n",
    "#FinalFilenamespecs = Subcategory + \"_LSTMspecs\"\n",
    "#FinalFilenamespecs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of numerical variables:  1\n",
      "           load\n",
      "count   1258.00\n",
      "mean   27064.26\n",
      "std     4258.21\n",
      "min    16804.00\n",
      "25%    24141.00\n",
      "50%    26554.00\n",
      "75%    30394.50\n",
      "max    37574.00\n",
      "kurt      -0.69\n",
      "skew       0.15\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## PERFORM EXPLANATORY DISCRIPTIVES ANALYSIS\n",
    "from exploratory_data_analysis_v2 import data_analysis\n",
    "#pyplot.plot(OriginalDataSeries.values)\n",
    "Descriptives, dictionary_line_figures, dictionary_histogram_figures, dictionary_scatter_figures, dictionary_boxplot_figures = data_analysis(OriginalDataSeries)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Data Pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Features:  1\n",
      "Trainset shape:  (881, 1)\n",
      "Testset shape:  (377, 1)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>load</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-01</th>\n",
       "      <td>27080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-01</th>\n",
       "      <td>29568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-03-01</th>\n",
       "      <td>34101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-01</th>\n",
       "      <td>34647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-01</th>\n",
       "      <td>36121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             load\n",
       "date             \n",
       "2017-01-01  27080\n",
       "2017-02-01  29568\n",
       "2017-03-01  34101\n",
       "2017-04-01  34647\n",
       "2017-05-01  36121"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## SPLIT DATA TO TRAINING & TESTING SETS\n",
    "from traintest_split import train_test_split\n",
    "# define forecasting horizon in weeks (or months if data is monthly)\n",
    "# steps used for forecasting and steps used for predictions\n",
    "\n",
    "#Define numberoffeatues\n",
    "if model_type != 'ms':\n",
    "    numberoffeatures = OriginalDataSeries.shape[1]-1\n",
    "else:\n",
    "    numberoffeatures = OriginalDataSeries.shape[1]\n",
    "print('Number of Features: ', numberoffeatures)\n",
    "\n",
    "split = int(0.3*OriginalDataSeries.shape[0])\n",
    "stepsin = 8\n",
    "stepsout = 4\n",
    "train, test = train_test_split(OriginalDataSeries,split)\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Single Series Complete for Multi-step!\n",
      "Single Series Complete for Multi-step!\n"
     ]
    }
   ],
   "source": [
    "## RESCALING DATA BEFORE USING LSTM\n",
    "from min_max_transform import min_max_transform\n",
    "\n",
    "# Rescale Trainset\n",
    "train_rescaled_array,train_rescaled, train_scaler = min_max_transform(train,(0,1))\n",
    "\n",
    "# Rescale Testset\n",
    "test_rescaled_array, test_rescaled, test_scaler = min_max_transform(test,(0,1))\n",
    "\n",
    "# Create new array containing last stepsin of train and test set\n",
    "test_rescaled_array_new = np.concatenate((train_rescaled_array[-stepsin:], test_rescaled_array),axis = 0)\n",
    "test_rescaled_array_new = np.array(test_rescaled_array_new)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Variable Selection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_sequences_stepsin shape:  (870, 8, 1)\n",
      "train_sequences_stepsout shape:  (870, 4)\n"
     ]
    }
   ],
   "source": [
    "## SPLIT TRAIN DATA INTO PAIRS (Stepsin/Stepsout Sequences) & Return Stepsin as 3D Matrix and Stepsout as 2D Matrix\n",
    "from createsequences import split_sequences\n",
    "train_sequences_stepsin, train_sequences_stepsout = split_sequences(train_rescaled_array, stepsin, stepsout,numberoffeatures,model_type)\n",
    "\n",
    "print('train_sequences_stepsin shape: ', train_sequences_stepsin.shape)\n",
    "print('train_sequences_stepsout shape: ', train_sequences_stepsout.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.0 Build, Evaluate & Predict LSTM Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_10 (LSTM)               (None, 8, 10)             480       \n",
      "_________________________________________________________________\n",
      "dropout_10 (Dropout)         (None, 8, 10)             0         \n",
      "_________________________________________________________________\n",
      "lstm_11 (LSTM)               (None, 8, 10)             840       \n",
      "_________________________________________________________________\n",
      "dropout_11 (Dropout)         (None, 8, 10)             0         \n",
      "_________________________________________________________________\n",
      "lstm_12 (LSTM)               (None, 10)                840       \n",
      "_________________________________________________________________\n",
      "dropout_12 (Dropout)         (None, 10)                0         \n",
      "_________________________________________________________________\n",
      "dense_4 (Dense)              (None, 4)                 44        \n",
      "=================================================================\n",
      "Total params: 2,204\n",
      "Trainable params: 2,204\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/250\n",
      "870/870 [==============================] - 16s 18ms/step - loss: 0.1662 - mae: 0.1599\n",
      "Epoch 2/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1301 - mae: 0.1274\n",
      "Epoch 3/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1243 - mae: 0.1220\n",
      "Epoch 4/250\n",
      "870/870 [==============================] - 12s 13ms/step - loss: 0.1226 - mae: 0.1205\n",
      "Epoch 5/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1177 - mae: 0.1157\n",
      "Epoch 6/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1198 - mae: 0.1179\n",
      "Epoch 7/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1150 - mae: 0.1131\n",
      "Epoch 8/250\n",
      "870/870 [==============================] - 10s 12ms/step - loss: 0.1135 - mae: 0.1117\n",
      "Epoch 9/250\n",
      "870/870 [==============================] - 11s 12ms/step - loss: 0.1109 - mae: 0.1092\n",
      "Epoch 10/250\n",
      "870/870 [==============================] - 10s 12ms/step - loss: 0.1117 - mae: 0.1100\n",
      "Epoch 11/250\n",
      "870/870 [==============================] - 10s 12ms/step - loss: 0.1106 - mae: 0.1090\n",
      "Epoch 12/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1108 - mae: 0.1093\n",
      "Epoch 13/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1101 - mae: 0.1087\n",
      "Epoch 14/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1101 - mae: 0.1087\n",
      "Epoch 15/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1097 - mae: 0.1083\n",
      "Epoch 16/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1083 - mae: 0.1070\n",
      "Epoch 17/250\n",
      "870/870 [==============================] - 10s 11ms/step - loss: 0.1079 - mae: 0.1066\n",
      "Epoch 18/250\n",
      "870/870 [==============================] - 9s 11ms/step - loss: 0.1080 - mae: 0.1068\n",
      "Epoch 19/250\n",
      "870/870 [==============================] - 10s 12ms/step - loss: 0.1099 - mae: 0.1086\n",
      "Epoch 20/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1084 - mae: 0.1071\n",
      "Epoch 21/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1075 - mae: 0.1063\n",
      "Epoch 22/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.1081 - mae: 0.1069\n",
      "Epoch 23/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1080 - mae: 0.1069\n",
      "Epoch 24/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1074 - mae: 0.1063\n",
      "Epoch 25/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1086 - mae: 0.1075\n",
      "Epoch 26/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1078 - mae: 0.1066\n",
      "Epoch 27/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1079 - mae: 0.1068\n",
      "Epoch 28/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1058 - mae: 0.1047\n",
      "Epoch 29/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1062 - mae: 0.1051\n",
      "Epoch 30/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1059 - mae: 0.1048\n",
      "Epoch 31/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1054 - mae: 0.1043\n",
      "Epoch 32/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1054 - mae: 0.1043\n",
      "Epoch 33/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1040 - mae: 0.1029\n",
      "Epoch 34/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1049 - mae: 0.1038\n",
      "Epoch 35/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1051 - mae: 0.1040\n",
      "Epoch 36/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1043 - mae: 0.1032\n",
      "Epoch 37/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.1045 - mae: 0.1035\n",
      "Epoch 38/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1028 - mae: 0.1018\n",
      "Epoch 39/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1055 - mae: 0.1045\n",
      "Epoch 40/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1043 - mae: 0.1033\n",
      "Epoch 41/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1040 - mae: 0.1030\n",
      "Epoch 42/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1020 - mae: 0.1011\n",
      "Epoch 43/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1061 - mae: 0.1052\n",
      "Epoch 44/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1049 - mae: 0.1040\n",
      "Epoch 45/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1043 - mae: 0.1035\n",
      "Epoch 46/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1035 - mae: 0.1026\n",
      "Epoch 47/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1032 - mae: 0.1023\n",
      "Epoch 48/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1046 - mae: 0.1038\n",
      "Epoch 49/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1019 - mae: 0.1011\n",
      "Epoch 50/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1027 - mae: 0.1019\n",
      "Epoch 51/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1020 - mae: 0.1012\n",
      "Epoch 52/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.1034 - mae: 0.1026\n",
      "Epoch 53/250\n",
      "870/870 [==============================] - 12s 13ms/step - loss: 0.1025 - mae: 0.1017\n",
      "Epoch 54/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1029 - mae: 0.1021\n",
      "Epoch 55/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1033 - mae: 0.1025\n",
      "Epoch 56/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1017 - mae: 0.1009\n",
      "Epoch 57/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1023 - mae: 0.1015\n",
      "Epoch 58/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1037 - mae: 0.1029\n",
      "Epoch 59/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1008 - mae: 0.1000\n",
      "Epoch 60/250\n",
      "870/870 [==============================] - 44s 51ms/step - loss: 0.1024 - mae: 0.1016\n",
      "Epoch 61/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1034 - mae: 0.1026\n",
      "Epoch 62/250\n",
      "870/870 [==============================] - 11s 13ms/step - loss: 0.1009 - mae: 0.1002\n",
      "Epoch 63/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1023 - mae: 0.1015\n",
      "Epoch 64/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1036 - mae: 0.1028\n",
      "Epoch 65/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1001 - mae: 0.0993\n",
      "Epoch 66/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1036 - mae: 0.1029\n",
      "Epoch 67/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1010 - mae: 0.1003\n",
      "Epoch 68/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1016 - mae: 0.1009\n",
      "Epoch 69/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1001 - mae: 0.0994\n",
      "Epoch 70/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1021 - mae: 0.1013\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 71/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1015 - mae: 0.1007\n",
      "Epoch 72/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1029 - mae: 0.1022\n",
      "Epoch 73/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1006 - mae: 0.0999\n",
      "Epoch 74/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1004 - mae: 0.0996\n",
      "Epoch 75/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1014 - mae: 0.1006\n",
      "Epoch 76/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1012 - mae: 0.1004\n",
      "Epoch 77/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1029 - mae: 0.1021\n",
      "Epoch 78/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1001 - mae: 0.0993\n",
      "Epoch 79/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1006 - mae: 0.0999\n",
      "Epoch 80/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1004 - mae: 0.0997\n",
      "Epoch 81/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1016 - mae: 0.1009\n",
      "Epoch 82/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1021 - mae: 0.1013\n",
      "Epoch 83/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0995 - mae: 0.0988\n",
      "Epoch 84/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1005 - mae: 0.0997\n",
      "Epoch 85/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1008 - mae: 0.1001\n",
      "Epoch 86/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.1006 - mae: 0.0998\n",
      "Epoch 87/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0983 - mae: 0.0975\n",
      "Epoch 88/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1003 - mae: 0.0995\n",
      "Epoch 89/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1005 - mae: 0.0997\n",
      "Epoch 90/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0989 - mae: 0.0982\n",
      "Epoch 91/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0992 - mae: 0.0985\n",
      "Epoch 92/250\n",
      "870/870 [==============================] - 14s 17ms/step - loss: 0.0999 - mae: 0.0992\n",
      "Epoch 93/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0985 - mae: 0.0977\n",
      "Epoch 94/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.1015 - mae: 0.1008\n",
      "Epoch 95/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.1004 - mae: 0.0996\n",
      "Epoch 96/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0996 - mae: 0.0988\n",
      "Epoch 97/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0984 - mae: 0.0977\n",
      "Epoch 98/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1002 - mae: 0.0994\n",
      "Epoch 99/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1007 - mae: 0.0999\n",
      "Epoch 100/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.1002 - mae: 0.0995\n",
      "Epoch 101/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1002 - mae: 0.0995\n",
      "Epoch 102/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0995 - mae: 0.0987\n",
      "Epoch 103/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0973 - mae: 0.0965\n",
      "Epoch 104/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0981 - mae: 0.0973\n",
      "Epoch 105/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.1000 - mae: 0.0993\n",
      "Epoch 106/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0976 - mae: 0.0968\n",
      "Epoch 107/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.1003 - mae: 0.0995\n",
      "Epoch 108/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0980 - mae: 0.0972\n",
      "Epoch 109/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0978 - mae: 0.0970\n",
      "Epoch 110/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0992 - mae: 0.0984\n",
      "Epoch 111/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0974 - mae: 0.0966\n",
      "Epoch 112/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0998 - mae: 0.0991\n",
      "Epoch 113/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.1008 - mae: 0.1001\n",
      "Epoch 114/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0988 - mae: 0.0980\n",
      "Epoch 115/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0978 - mae: 0.0971\n",
      "Epoch 116/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0980 - mae: 0.0973\n",
      "Epoch 117/250\n",
      "870/870 [==============================] - 23s 27ms/step - loss: 0.0977 - mae: 0.0970\n",
      "Epoch 118/250\n",
      "870/870 [==============================] - 14s 17ms/step - loss: 0.0970 - mae: 0.0963\n",
      "Epoch 119/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0971 - mae: 0.0964\n",
      "Epoch 120/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0981 - mae: 0.0974\n",
      "Epoch 121/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0988 - mae: 0.0980\n",
      "Epoch 122/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0945 - mae: 0.0938\n",
      "Epoch 123/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0993 - mae: 0.0986\n",
      "Epoch 124/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0975 - mae: 0.0967\n",
      "Epoch 125/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0980 - mae: 0.0973\n",
      "Epoch 126/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0990 - mae: 0.0983\n",
      "Epoch 127/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0963 - mae: 0.0955\n",
      "Epoch 128/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0972 - mae: 0.0965\n",
      "Epoch 129/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0971 - mae: 0.0963\n",
      "Epoch 130/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0961 - mae: 0.0954\n",
      "Epoch 131/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0973 - mae: 0.0966\n",
      "Epoch 132/250\n",
      "870/870 [==============================] - 14s 17ms/step - loss: 0.0979 - mae: 0.0971\n",
      "Epoch 133/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0971 - mae: 0.0963\n",
      "Epoch 134/250\n",
      "870/870 [==============================] - 14s 17ms/step - loss: 0.0972 - mae: 0.0964\n",
      "Epoch 135/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0960 - mae: 0.0952\n",
      "Epoch 136/250\n",
      "870/870 [==============================] - 16s 18ms/step - loss: 0.0970 - mae: 0.0962\n",
      "Epoch 137/250\n",
      "870/870 [==============================] - 16s 18ms/step - loss: 0.0960 - mae: 0.0952\n",
      "Epoch 138/250\n",
      "870/870 [==============================] - 15s 18ms/step - loss: 0.0943 - mae: 0.0935\n",
      "Epoch 139/250\n",
      "870/870 [==============================] - 17s 20ms/step - loss: 0.0951 - mae: 0.0943\n",
      "Epoch 140/250\n",
      "870/870 [==============================] - 14s 17ms/step - loss: 0.0986 - mae: 0.0978\n",
      "Epoch 141/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0955 - mae: 0.0947\n",
      "Epoch 142/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0943 - mae: 0.0935\n",
      "Epoch 143/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0954 - mae: 0.0946 1s - l\n",
      "Epoch 144/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0957 - mae: 0.0949\n",
      "Epoch 145/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0967 - mae: 0.0959\n",
      "Epoch 146/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0958 - mae: 0.0950\n",
      "Epoch 147/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0968 - mae: 0.0960\n",
      "Epoch 148/250\n",
      "870/870 [==============================] - 15s 18ms/step - loss: 0.0971 - mae: 0.0963\n",
      "Epoch 149/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0943 - mae: 0.0935\n",
      "Epoch 150/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0961 - mae: 0.0953\n",
      "Epoch 151/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0955 - mae: 0.0946\n",
      "Epoch 152/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0964 - mae: 0.0955\n",
      "Epoch 153/250\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0946 - mae: 0.0938\n",
      "Epoch 154/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0954 - mae: 0.0946\n",
      "Epoch 155/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0958 - mae: 0.0950\n",
      "Epoch 156/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0951 - mae: 0.0943\n",
      "Epoch 157/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0946 - mae: 0.0938\n",
      "Epoch 158/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0932 - mae: 0.0924\n",
      "Epoch 159/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0955 - mae: 0.0947\n",
      "Epoch 160/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0939 - mae: 0.0931\n",
      "Epoch 161/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0948 - mae: 0.0940\n",
      "Epoch 162/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0926 - mae: 0.0917\n",
      "Epoch 163/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0959 - mae: 0.0951\n",
      "Epoch 164/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0924 - mae: 0.0916\n",
      "Epoch 165/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0935 - mae: 0.0927\n",
      "Epoch 166/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0925 - mae: 0.0917\n",
      "Epoch 167/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0936 - mae: 0.0927\n",
      "Epoch 168/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0939 - mae: 0.0931\n",
      "Epoch 169/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0932 - mae: 0.0924\n",
      "Epoch 170/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0940 - mae: 0.0931\n",
      "Epoch 171/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0942 - mae: 0.0933\n",
      "Epoch 172/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0906 - mae: 0.0898\n",
      "Epoch 173/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0934 - mae: 0.0926\n",
      "Epoch 174/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0941 - mae: 0.0932\n",
      "Epoch 175/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0935 - mae: 0.0926\n",
      "Epoch 176/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0943 - mae: 0.0934\n",
      "Epoch 177/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0897 - mae: 0.0889\n",
      "Epoch 178/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0946 - mae: 0.0938\n",
      "Epoch 179/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0924 - mae: 0.0916\n",
      "Epoch 180/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0939 - mae: 0.0930\n",
      "Epoch 181/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0931 - mae: 0.0923\n",
      "Epoch 182/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0938 - mae: 0.0930\n",
      "Epoch 183/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0918 - mae: 0.0909\n",
      "Epoch 184/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0926 - mae: 0.0918\n",
      "Epoch 185/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0918 - mae: 0.0910\n",
      "Epoch 186/250\n",
      "870/870 [==============================] - 17s 20ms/step - loss: 0.0915 - mae: 0.0907\n",
      "Epoch 187/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0918 - mae: 0.0910\n",
      "Epoch 188/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0927 - mae: 0.0919\n",
      "Epoch 189/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0930 - mae: 0.0922\n",
      "Epoch 190/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0906 - mae: 0.0898\n",
      "Epoch 191/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0911 - mae: 0.0903\n",
      "Epoch 192/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0930 - mae: 0.0921\n",
      "Epoch 193/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0913 - mae: 0.0905\n",
      "Epoch 194/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0929 - mae: 0.0921\n",
      "Epoch 195/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0918 - mae: 0.0909\n",
      "Epoch 196/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0921 - mae: 0.0913\n",
      "Epoch 197/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0913 - mae: 0.0904\n",
      "Epoch 198/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0926 - mae: 0.0918\n",
      "Epoch 199/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0899 - mae: 0.0890\n",
      "Epoch 200/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0923 - mae: 0.0915\n",
      "Epoch 201/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0928 - mae: 0.0919\n",
      "Epoch 202/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0903 - mae: 0.0895\n",
      "Epoch 203/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0925 - mae: 0.0916\n",
      "Epoch 204/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0933 - mae: 0.0925\n",
      "Epoch 205/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0916 - mae: 0.0907\n",
      "Epoch 206/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0904 - mae: 0.0895\n",
      "Epoch 207/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0926 - mae: 0.0917\n",
      "Epoch 208/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0895 - mae: 0.0886\n",
      "Epoch 209/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0933 - mae: 0.0924\n",
      "Epoch 210/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0916 - mae: 0.0906\n",
      "Epoch 211/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0926 - mae: 0.0917\n",
      "Epoch 212/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0922 - mae: 0.0914\n",
      "Epoch 213/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0924 - mae: 0.0916\n",
      "Epoch 214/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0912 - mae: 0.0903\n",
      "Epoch 215/250\n",
      "870/870 [==============================] - 15s 17ms/step - loss: 0.0900 - mae: 0.0891\n",
      "Epoch 216/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0912 - mae: 0.0903\n",
      "Epoch 217/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0903 - mae: 0.0894\n",
      "Epoch 218/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0897 - mae: 0.0888\n",
      "Epoch 219/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0902 - mae: 0.0893\n",
      "Epoch 220/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0912 - mae: 0.0902\n",
      "Epoch 221/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0898 - mae: 0.0889\n",
      "Epoch 222/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0908 - mae: 0.0899\n",
      "Epoch 223/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0908 - mae: 0.0899 0s - loss: 0.090\n",
      "Epoch 224/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0899 - mae: 0.0891\n",
      "Epoch 225/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0892 - mae: 0.0884\n",
      "Epoch 226/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0900 - mae: 0.0891\n",
      "Epoch 227/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0890 - mae: 0.0882\n",
      "Epoch 228/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0891 - mae: 0.0882\n",
      "Epoch 229/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0896 - mae: 0.0887\n",
      "Epoch 230/250\n",
      "870/870 [==============================] - 13s 14ms/step - loss: 0.0902 - mae: 0.0893\n",
      "Epoch 231/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0900 - mae: 0.0890\n",
      "Epoch 232/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0888 - mae: 0.0879\n",
      "Epoch 233/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0888 - mae: 0.0879\n",
      "Epoch 234/250\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0896 - mae: 0.0887\n",
      "Epoch 235/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0910 - mae: 0.0901\n",
      "Epoch 236/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0901 - mae: 0.0892\n",
      "Epoch 237/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0890 - mae: 0.0881\n",
      "Epoch 238/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0903 - mae: 0.0894\n",
      "Epoch 239/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0890 - mae: 0.0880\n",
      "Epoch 240/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0909 - mae: 0.0900\n",
      "Epoch 241/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0893 - mae: 0.0884\n",
      "Epoch 242/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0905 - mae: 0.0896\n",
      "Epoch 243/250\n",
      "870/870 [==============================] - 14s 16ms/step - loss: 0.0871 - mae: 0.0862\n",
      "Epoch 244/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0877 - mae: 0.0868\n",
      "Epoch 245/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0893 - mae: 0.0884\n",
      "Epoch 246/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0888 - mae: 0.0879\n",
      "Epoch 247/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0897 - mae: 0.0887\n",
      "Epoch 248/250\n",
      "870/870 [==============================] - 12s 14ms/step - loss: 0.0888 - mae: 0.0878\n",
      "Epoch 249/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0888 - mae: 0.0879\n",
      "Epoch 250/250\n",
      "870/870 [==============================] - 13s 15ms/step - loss: 0.0888 - mae: 0.0879\n"
     ]
    }
   ],
   "source": [
    "#Define Hyperparameters\n",
    "epoch_num = 250\n",
    "batch_size = 2\n",
    "dropout_value = 0.1\n",
    "#numberoffeatures = train_sequences_stepsin.shape[2]\n",
    "\n",
    "\n",
    "#Run Model with Regularisation using Dropout\n",
    "from final_model_drpout import final_model\n",
    "model_final, model_final2 = final_model(stepsin, numberoffeatures,stepsout,epoch_num,train_sequences_stepsin,train_sequences_stepsout,dropout_value,batch_size,model_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "ename": "KeyError",
     "evalue": "'mape'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-2c106b04789a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmae_loss_graph\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmetrics_epoch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mmetrics_epoch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_final2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/OneDrive - GSK/Samuel Tonks/LSTMs/LSTM_MS_MV_MP/mae_loss_graph.py\u001b[0m in \u001b[0;36mmetrics_epoch\u001b[0;34m(model_final2)\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mmape_f\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel_final2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mape'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Mean Absolute Percentage Error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'MAPE'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'mape'"
     ]
    }
   ],
   "source": [
    "from mae_loss_graph import metrics_epoch\n",
    "metrics_epoch(model_final2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# RUN PREDICTIONS ON THE TRAIN SET \n",
    "predictions = model_final.predict(train_sequences_stepsin)\n",
    "print(train_sequences_stepsin.shape)\n",
    "print(predictions.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Creating array for plotting predictions\n",
    "from predictions_new import predictions_new\n",
    "train_predictions = predictions_new(train_sequences_stepsin,predictions, stepsin, stepsout,model_type)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from final_graph import trainset_graph\n",
    "train_rescaled_actual, train_predictions_actual = trainset_graph(train_rescaled, train_predictions,train_scaler,model_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from error_distribution import error_distribution\n",
    "error_distribution(train_rescaled_actual,train_predictions_actual, stepsout,stepsin,model_type,columns)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Generate Input & Forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(56, 7)\n"
     ]
    }
   ],
   "source": [
    "from entire_series_forecasting_input import create_traintest_input\n",
    "#Creating last stepin from train and concatenate with test.\n",
    "input_data = create_traintest_input(train_rescaled_array,test_rescaled_array, stepsin,stepsout,model_type)\n",
    "print(input_data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(48, 1)\n"
     ]
    }
   ],
   "source": [
    "## ROLLING FORECASTING\n",
    "from rollingforecasting_v2 import stepout_forecasting\n",
    "data_test_predictions, data_test_predictions_actual = stepout_forecasting(input_data, stepsin,numberoffeatures,stepsout,forecasting_horizon,model_final,test_scaler,model_type)\n",
    "data_test_predictions = data_test_predictions.reshape(-1,1)\n",
    "print(data_test_predictions.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(48, 8)\n"
     ]
    }
   ],
   "source": [
    "print(test_rescaled_array.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from final_graph import testset_graph\n",
    "test_rescaled_actual, test_predictions_actual = testset_graph(test_rescaled_array,data_test_predictions,test_scaler,Subcategory,model_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE:0.486454\n",
      "MAPE:7.478077\n",
      "RMSE:0.538958\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from error_distribution import error_distribution\n",
    "error_distribution(test_rescaled_actual,test_predictions_actual,stepsout,stepsin,model_type,columns)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.0 Final Forecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature at Index 0 No Transform required.\n",
      "Feature at Index 1 No Transform required.\n",
      "Feature at Index 2 No Transform required.\n",
      "Feature at Index 3 No Transform required.\n",
      "Feature at Index 4 No Transform required.\n",
      "Feature at Index 5 No Transform required.\n",
      "Feature at Index 6 No Transform required.\n",
      "Feature at Index 7 Transform Complete.\n",
      "total_sequences_stepsin shape:  (150, 8, 7)\n",
      "total_sequences_stepsout shape:  (150, 4)\n"
     ]
    }
   ],
   "source": [
    "## SCALE TOTAL SET\n",
    "total_rescaled_array, total_rescaled, total_scaler = min_max_transform(OriginalDataSeries,(0,1))\n",
    "\n",
    "## SPLIT TOTAL SET INTO PAIRS (Stepsin/Stepsout Sequences) & Return Stepsin as 3D Matrix and Stepsout as 2D Matrix\n",
    "from createsequences import split_sequences\n",
    "total_sequences_stepsin, total_sequences_stepsout = split_sequences(total_rescaled_array, stepsin, stepsout,numberoffeatures,model_type)\n",
    "\n",
    "print('total_sequences_stepsin shape: ', total_sequences_stepsin.shape)\n",
    "print('total_sequences_stepsout shape: ', total_sequences_stepsout.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "lstm_4 (LSTM)                (None, 8, 10)             720       \n",
      "_________________________________________________________________\n",
      "dropout_4 (Dropout)          (None, 8, 10)             0         \n",
      "_________________________________________________________________\n",
      "lstm_5 (LSTM)                (None, 8, 10)             840       \n",
      "_________________________________________________________________\n",
      "dropout_5 (Dropout)          (None, 8, 10)             0         \n",
      "_________________________________________________________________\n",
      "lstm_6 (LSTM)                (None, 10)                840       \n",
      "_________________________________________________________________\n",
      "dropout_6 (Dropout)          (None, 10)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 4)                 44        \n",
      "=================================================================\n",
      "Total params: 2,444\n",
      "Trainable params: 2,444\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "Epoch 1/50\n",
      "150/150 [==============================] - 7s 44ms/step - loss: 0.3843 - mae: 0.3727 - mape: 76.6184\n",
      "Epoch 2/50\n",
      "150/150 [==============================] - 2s 13ms/step - loss: 0.1310 - mae: 0.1246 - mape: 25.1525\n",
      "Epoch 3/50\n",
      "150/150 [==============================] - 2s 13ms/step - loss: 0.1184 - mae: 0.1147 - mape: 23.0345\n",
      "Epoch 4/50\n",
      "150/150 [==============================] - 2s 13ms/step - loss: 0.1107 - mae: 0.1084 - mape: 22.1583\n",
      "Epoch 5/50\n",
      "150/150 [==============================] - 2s 14ms/step - loss: 0.1030 - mae: 0.1014 - mape: 20.3271\n",
      "Epoch 6/50\n",
      " 70/150 [=============>................] - ETA: 1s - loss: 0.0890 - mae: 0.0876 - mape: 18.1629"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-21-2bbe30a51cb0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mepoch_num_final\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mbacth_size_final\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmodel_final_total\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_final2_total\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfinal_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstepsin\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnumberoffeatures\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstepsout\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepoch_num_final\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal_sequences_stepsin\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtotal_sequences_stepsout\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mdropout_value\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbacth_size_final\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmodel_type\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/OneDrive - GSK/Samuel Tonks/LSTMs/LSTM_MS_MV_MP/final_model_drpout.py\u001b[0m in \u001b[0;36mfinal_model\u001b[0;34m(timesteps, numberoffeatures, stepsout, epoch_num, train_x, train_y, dp_value, batch_size, model_type)\u001b[0m\n\u001b[1;32m     49\u001b[0m         \u001b[0mmodel_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"mae\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'adam'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"mae\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"mape\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0mmodel_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msummary\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mmodel_final2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel_final\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_x\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mtrain_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mepoch_num\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mmodel_final\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmodel_final2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m   1237\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1238\u001b[0m                                         \u001b[0mvalidation_steps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_steps\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1239\u001b[0;31m                                         validation_freq=validation_freq)\n\u001b[0m\u001b[1;32m   1240\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1241\u001b[0m     def evaluate(self,\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, fit_function, fit_inputs, out_labels, batch_size, epochs, verbose, callbacks, val_function, val_inputs, shuffle, initial_epoch, steps_per_epoch, validation_steps, validation_freq)\u001b[0m\n\u001b[1;32m    194\u001b[0m                     \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    195\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 196\u001b[0;31m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfit_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    197\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3738\u001b[0m         \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmath_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3739\u001b[0m       \u001b[0mconverted_inputs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3740\u001b[0;31m     \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_graph_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mconverted_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3741\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3742\u001b[0m     \u001b[0;31m# EagerTensor.numpy() will often make a copy to ensure memory safety.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1079\u001b[0m       \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mFor\u001b[0m \u001b[0minvalid\u001b[0m \u001b[0mpositional\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mkeyword\u001b[0m \u001b[0margument\u001b[0m \u001b[0mcombinations\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1080\u001b[0m     \"\"\"\n\u001b[0;32m-> 1081\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1082\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1083\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, args, kwargs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1119\u001b[0m       raise TypeError(\"Keyword arguments {} unknown. Expected {}.\".format(\n\u001b[1;32m   1120\u001b[0m           list(kwargs.keys()), list(self._arg_keywords)))\n\u001b[0;32m-> 1121\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_flat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcaptured_inputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcancellation_manager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1123\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_filtered_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1222\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mexecuting_eagerly\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1223\u001b[0m       flat_outputs = forward_function.call(\n\u001b[0;32m-> 1224\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager)\n\u001b[0m\u001b[1;32m   1225\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1226\u001b[0m       \u001b[0mgradient_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_delayed_rewrite_functions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    509\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    510\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"executor_type\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexecutor_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"config_proto\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 511\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    512\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    513\u001b[0m           outputs = execute.execute_with_cancellation(\n",
      "\u001b[0;32m~/opt/anaconda3/envs/LSTM_FORECASTING/lib/python3.7/site-packages/tensorflow_core/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tensorflow.TFE_Py_Execute(ctx._handle, device_name,\n\u001b[1;32m     60\u001b[0m                                                \u001b[0mop_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 61\u001b[0;31m                                                num_outputs)\n\u001b[0m\u001b[1;32m     62\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "epoch_num_final = 50\n",
    "bacth_size_final = 2\n",
    "model_final_total, model_final2_total = final_model(stepsin,numberoffeatures,stepsout,epoch_num_final,total_sequences_stepsin,total_sequences_stepsout,dropout_value,bacth_size_final,model_type)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from mae_loss_graph import metrics_epoch\n",
    "metrics_epoch(model_final2_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from final_graph import final_graph\n",
    "datafortemplate = final_graph(array(OriginalDataSeries),data_test_predictions,total_scaler,Subcategory)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save Final Model and Input\n",
    "model_final_total.save(model_output_dir + \"pretrainedmodel.hdf5\")\n",
    "# save to csv file\n",
    "savetxt('final_input.csv', total_sequences_stepsin, delimiter=',')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## GET FINAL MODEL TYPE SPECIFICATIONS\n",
    "from model_type import model_type\n",
    "numberoffeatures, specs = model_type(train,test,stepsin,stepsout,forecasting_horizon,split,epoch_num_final,batch_size,dropout_value)\n",
    "specs.to_csv('C:/Users/smt29021/OneDrive - GSK/Samuel Tonks/Forecasting MAP/predictions/'+Subcategory+\"_\"+\"_LSTMspecs\"\".csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Table for prediction\n",
    "cols = datafortemplate.columns\n",
    "cols = [Subcategory]\n",
    "datafortemplate.columns = cols\n",
    "datafortemplate.to_csv('C:/Users/smt29021/OneDrive - GSK/Samuel Tonks/Forecasting MAP/predictions/final_forecasts'+Subcategory+\".csv\", mode='w', header=False)\n",
    "datafortemplate.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving the model’s summary\n",
    "from contextlib import redirect_stdout\n",
    "with open(FinalFilenametxt , 'w') as f:\n",
    "    with redirect_stdout(f):\n",
    "        print(model_fit.summary())\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
